var y=()=>{let t=new Map;return{listen:(n,e)=>(t.has(n)||t.set(n,new Set),t.get(n).add(e),()=>{t.has(n)&&t.get(n).delete(e)}),publish:async(n,e)=>{if(console.log(t),t.has(n)){let o=t.get(n);for(let r of o.values())await r(e)}else throw Error(`Event ${n} doesn't exist`)},clear:n=>{t.delete(n)}}};var d=(t,n,...e)=>{let o=performance.now();for(let r=0;r<n;r++)t(...e);return performance.now()-o};function a(t,n=[]){for(let e=0;e<t.length;e++){let o=t[e];Array.isArray(o)?a(o,n):n.push(o)}return n}function m(t){return a(t)}function i(t){if(t.length<=1)return t;let n=t[t.length-1],e=[],o=[];for(let r of t.slice(0,t.length-1))r<=n?e.push(r):o.push(r);return[...i(e),n,...i(o)]}import*as f from"js-yaml";var k=()=>({validate:(t,n)=>{let e=f.load(t);if(!e||typeof e!="object")throw new Error("Invalid YAML data");for(let o in n)if(Object.prototype.hasOwnProperty.call(n,o)){let r=n[o],s=e[o];if(s===void 0)throw new Error(`Key '${o}' not found in YAML data`);for(let l of r)if(!l(s))throw new Error(`Validation failed for ${o}: ${s}`)}return!0}});var b=t=>({tag:"Some",value:t});export{y as EventEmitter,b as Some,m as flat,i as quickSort,d as runTime,k as yamlValidator};
