var y=()=>{let n=new Map;return{listen:(t,e)=>(n.has(t)||n.set(t,new Set),n.get(t).add(e),()=>{n.has(t)&&n.get(t).delete(e)}),publish:async(t,e)=>{if(console.log(n),n.has(t)){let o=n.get(t);for(let r of o.values())await r(e)}else throw Error(`Event ${t} doesn't exist`)},clear:t=>{n.delete(t)}}};var u=(n,t,...e)=>{let o=performance.now();for(let r=0;r<t;r++)n(...e);return performance.now()-o};function a(n,t=[]){for(let e=0;e<n.length;e++){let o=n[e];Array.isArray(o)?a(o,t):t.push(o)}return t}function E(n){return a(n)}function i(n){if(n.length<=1)return n;let t=n[n.length-1],e=[],o=[];for(let r of n.slice(0,n.length-1))r<=t?e.push(r):o.push(r);return[...i(e),t,...i(o)]}import*as l from"js-yaml";var $=()=>({validate:(n,t)=>{let e=l.load(n);if(!e||typeof e!="object")throw new Error("Invalid YAML data");for(let o in t)if(Object.prototype.hasOwnProperty.call(t,o)){let r=t[o],s=e[o];if(s===void 0)throw new Error(`Key '${o}' not found in YAML data`);for(let c of r)if(!c(s))throw new Error(`Validation failed for ${o}: ${s}`)}return!0}});var m=n=>({tag:"Some",value:n});export{y as EventEmitter,m as Some,E as flat,i as quickSort,u as runTime,$ as yamlValidator};
